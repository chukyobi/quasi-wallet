datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int             @id @default(autoincrement())
  name             String
  email            String          @unique
  password         String?
  wallets          Wallet[]        // One-to-many relation with Wallet
  backupWallets    BackupWallet[]  // One-to-many relation with BackupWallet using email
  transactions     Transaction[]   // One-to-many relation with Transaction
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
}

model Wallet {
  id        Int      @id @default(autoincrement())
  email     String   // Foreign key to the User model based on email
  user      User     @relation(fields: [email], references: [email]) // Link to the User model by email
  walletId  String   @unique // Unique identifier for the wallet (could be a wallet address or ID)
  balance   Float    @default(0.0) // Wallet balance
  currency  String   // Currency type (e.g., USD, BTC, ETH)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BackupWallet {
  id              Int       @id @default(autoincrement())
  email           String    // Foreign key to User's email
  user            User      @relation(fields: [email], references: [email]) // Link to User model by email
  name            String    // Wallet name (e.g., Metamask, Binance)
  logo            String?   // Path to logo (optional, e.g., "/assets/metamask.svg")
  publicAddress   String?   // Public address for portfolio tracking
  seedPhrase      String?   // Encrypted seed phrase for backup
  privateKey      String?   // Encrypted private key for recovery (optional)
  qrCodeData      String?   // QR Code data for wallet connection
  manualBackup    Json?     // JSON for manual backup details (e.g., API keys)
  balance         Float     @default(0.0) // Default balance
  currency        String?   // Currency type (e.g., BTC, ETH)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Transaction {
  id              Int       @id @default(autoincrement())
  userEmail       String    // Foreign key to User's email
  transactionType String    // e.g., 'deposit' or 'withdraw'
  amount          Float
  status          String    // e.g., 'pending' or 'successful'
  currency        String    // e.g., 'BTC', 'ETH'
  transactionDate DateTime  @default(now())
  user            User      @relation(fields: [userEmail], references: [email]) // Link to User by email
}
